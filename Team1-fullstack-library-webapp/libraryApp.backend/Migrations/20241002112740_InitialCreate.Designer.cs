// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using libraryApp.backend.Entity;

#nullable disable

namespace libraryApp.backend.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20241002112740_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("libraryApp.backend.Entity.Book", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("number_of_pages")
                        .HasColumnType("integer");

                    b.Property<bool>("status")
                        .HasColumnType("boolean");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            id = 1,
                            number_of_pages = 250,
                            status = true,
                            title = "The Psychology of Money",
                            type = "psychology"
                        },
                        new
                        {
                            id = 2,
                            number_of_pages = 368,
                            status = true,
                            title = "The Silent Patient",
                            type = "thriller"
                        },
                        new
                        {
                            id = 3,
                            number_of_pages = 334,
                            status = true,
                            title = "Educated",
                            type = "memoir"
                        },
                        new
                        {
                            id = 4,
                            number_of_pages = 448,
                            status = true,
                            title = "Becoming",
                            type = "memoir"
                        },
                        new
                        {
                            id = 5,
                            number_of_pages = 208,
                            status = true,
                            title = "The Alchemist",
                            type = "fiction"
                        },
                        new
                        {
                            id = 6,
                            number_of_pages = 464,
                            status = true,
                            title = "Sapiens: A Brief History of Humankind",
                            type = "history"
                        },
                        new
                        {
                            id = 7,
                            number_of_pages = 371,
                            status = true,
                            title = "The Power of Habit",
                            type = "self-help"
                        },
                        new
                        {
                            id = 8,
                            number_of_pages = 277,
                            status = true,
                            title = "The Catcher in the Rye",
                            type = "fiction"
                        },
                        new
                        {
                            id = 9,
                            number_of_pages = 328,
                            status = true,
                            title = "1984",
                            type = "dystopian"
                        },
                        new
                        {
                            id = 10,
                            number_of_pages = 281,
                            status = true,
                            title = "To Kill a Mockingbird",
                            type = "fiction"
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.BookAuthor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("bookId")
                        .HasColumnType("integer");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("bookId");

                    b.HasIndex("userId");

                    b.ToTable("BookAuthors");

                    b.HasData(
                        new
                        {
                            id = 1,
                            bookId = 1,
                            userId = 1
                        },
                        new
                        {
                            id = 2,
                            bookId = 2,
                            userId = 2
                        },
                        new
                        {
                            id = 3,
                            bookId = 3,
                            userId = 3
                        },
                        new
                        {
                            id = 4,
                            bookId = 4,
                            userId = 4
                        },
                        new
                        {
                            id = 5,
                            bookId = 5,
                            userId = 5
                        },
                        new
                        {
                            id = 6,
                            bookId = 6,
                            userId = 6
                        },
                        new
                        {
                            id = 7,
                            bookId = 7,
                            userId = 7
                        },
                        new
                        {
                            id = 8,
                            bookId = 8,
                            userId = 8
                        },
                        new
                        {
                            id = 9,
                            bookId = 9,
                            userId = 9
                        },
                        new
                        {
                            id = 10,
                            bookId = 10,
                            userId = 10
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.BookPublishRequest", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("bookId")
                        .HasColumnType("integer");

                    b.Property<bool>("confirmation")
                        .HasColumnType("boolean");

                    b.Property<bool>("pending")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("requestDate")
                        .HasColumnType("date");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("bookId");

                    b.HasIndex("userId");

                    b.ToTable("BookPublishRequests");

                    b.HasData(
                        new
                        {
                            id = 1,
                            bookId = 1,
                            confirmation = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 10, 2),
                            userId = 1
                        },
                        new
                        {
                            id = 2,
                            bookId = 2,
                            confirmation = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 10, 2),
                            userId = 2
                        },
                        new
                        {
                            id = 3,
                            bookId = 3,
                            confirmation = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 10, 2),
                            userId = 3
                        },
                        new
                        {
                            id = 4,
                            bookId = 4,
                            confirmation = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 10, 2),
                            userId = 4
                        },
                        new
                        {
                            id = 5,
                            bookId = 5,
                            confirmation = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 10, 2),
                            userId = 5
                        },
                        new
                        {
                            id = 6,
                            bookId = 6,
                            confirmation = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 10, 2),
                            userId = 6
                        },
                        new
                        {
                            id = 7,
                            bookId = 7,
                            confirmation = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 10, 2),
                            userId = 7
                        },
                        new
                        {
                            id = 8,
                            bookId = 8,
                            confirmation = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 10, 2),
                            userId = 8
                        },
                        new
                        {
                            id = 9,
                            bookId = 9,
                            confirmation = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 10, 2),
                            userId = 9
                        },
                        new
                        {
                            id = 10,
                            bookId = 10,
                            confirmation = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 10, 2),
                            userId = 10
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.LoanRequest", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("bookId")
                        .HasColumnType("integer");

                    b.Property<bool>("confirmation")
                        .HasColumnType("boolean");

                    b.Property<bool>("isReturned")
                        .HasColumnType("boolean");

                    b.Property<bool>("pending")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("requestDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("returnDate")
                        .HasColumnType("date");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("bookId");

                    b.HasIndex("userId");

                    b.ToTable("LoanRequests");

                    b.HasData(
                        new
                        {
                            id = 1,
                            bookId = 1,
                            confirmation = false,
                            isReturned = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 10, 2),
                            returnDate = new DateOnly(2024, 10, 9),
                            userId = 1
                        },
                        new
                        {
                            id = 2,
                            bookId = 2,
                            confirmation = false,
                            isReturned = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 10, 2),
                            returnDate = new DateOnly(2024, 10, 16),
                            userId = 2
                        },
                        new
                        {
                            id = 3,
                            bookId = 3,
                            confirmation = false,
                            isReturned = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 10, 2),
                            returnDate = new DateOnly(2024, 10, 23),
                            userId = 3
                        },
                        new
                        {
                            id = 4,
                            bookId = 4,
                            confirmation = false,
                            isReturned = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 10, 2),
                            returnDate = new DateOnly(2024, 10, 30),
                            userId = 4
                        },
                        new
                        {
                            id = 5,
                            bookId = 5,
                            confirmation = false,
                            isReturned = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 10, 2),
                            returnDate = new DateOnly(2024, 11, 1),
                            userId = 5
                        },
                        new
                        {
                            id = 6,
                            bookId = 6,
                            confirmation = false,
                            isReturned = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 10, 2),
                            returnDate = new DateOnly(2024, 10, 16),
                            userId = 6
                        },
                        new
                        {
                            id = 7,
                            bookId = 7,
                            confirmation = false,
                            isReturned = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 10, 2),
                            returnDate = new DateOnly(2024, 10, 23),
                            userId = 7
                        },
                        new
                        {
                            id = 8,
                            bookId = 8,
                            confirmation = false,
                            isReturned = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 10, 2),
                            returnDate = new DateOnly(2024, 10, 30),
                            userId = 8
                        },
                        new
                        {
                            id = 9,
                            bookId = 9,
                            confirmation = false,
                            isReturned = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 10, 2),
                            returnDate = new DateOnly(2024, 11, 1),
                            userId = 9
                        },
                        new
                        {
                            id = 10,
                            bookId = 10,
                            confirmation = false,
                            isReturned = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 10, 2),
                            returnDate = new DateOnly(2024, 10, 16),
                            userId = 10
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.Message", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isRead")
                        .HasColumnType("boolean");

                    b.Property<int>("recieverId")
                        .HasColumnType("integer");

                    b.Property<int>("senderId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("sendingDate")
                        .HasColumnType("date");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("senderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            id = 1,
                            content = "Hello! Looking forward to reading this book.",
                            isRead = false,
                            recieverId = 2,
                            senderId = 1,
                            sendingDate = new DateOnly(2024, 10, 2),
                            title = "Greetings"
                        },
                        new
                        {
                            id = 2,
                            content = "Did you finish the last chapter?",
                            isRead = false,
                            recieverId = 1,
                            senderId = 2,
                            sendingDate = new DateOnly(2024, 10, 2),
                            title = "Question"
                        },
                        new
                        {
                            id = 3,
                            content = "I found a great article related to our reading.",
                            isRead = false,
                            recieverId = 3,
                            senderId = 1,
                            sendingDate = new DateOnly(2024, 10, 2),
                            title = "Resource Sharing"
                        },
                        new
                        {
                            id = 4,
                            content = "Let's discuss this book in our next meeting.",
                            isRead = false,
                            recieverId = 4,
                            senderId = 1,
                            sendingDate = new DateOnly(2024, 10, 2),
                            title = "Discussion"
                        },
                        new
                        {
                            id = 5,
                            content = "What do you think about the protagonist's choices?",
                            isRead = false,
                            recieverId = 5,
                            senderId = 1,
                            sendingDate = new DateOnly(2024, 10, 2),
                            title = "Character Analysis"
                        },
                        new
                        {
                            id = 6,
                            content = "I can't wait to start the next book!",
                            isRead = false,
                            recieverId = 6,
                            senderId = 1,
                            sendingDate = new DateOnly(2024, 10, 2),
                            title = "Excitement"
                        },
                        new
                        {
                            id = 7,
                            content = "Have you read the latest chapter?",
                            isRead = false,
                            recieverId = 7,
                            senderId = 1,
                            sendingDate = new DateOnly(2024, 10, 2),
                            title = "Update"
                        },
                        new
                        {
                            id = 8,
                            content = "This book changed my perspective on many things.",
                            isRead = false,
                            recieverId = 8,
                            senderId = 1,
                            sendingDate = new DateOnly(2024, 10, 2),
                            title = "Thoughts"
                        },
                        new
                        {
                            id = 9,
                            content = "I'm glad we chose this book for our group.",
                            isRead = false,
                            recieverId = 9,
                            senderId = 1,
                            sendingDate = new DateOnly(2024, 10, 2),
                            title = "Group Decision"
                        },
                        new
                        {
                            id = 10,
                            content = "What are your favorite quotes from the book?",
                            isRead = false,
                            recieverId = 10,
                            senderId = 1,
                            sendingDate = new DateOnly(2024, 10, 2),
                            title = "Quotes"
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.Page", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("bookId")
                        .HasColumnType("integer");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("pageNumber")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("bookId");

                    b.ToTable("Pages");

                    b.HasData(
                        new
                        {
                            id = 1,
                            bookId = 1,
                            content = "Understanding how money works is essential in today's economy. This chapter explores the psychology behind financial decisions.",
                            pageNumber = 1
                        },
                        new
                        {
                            id = 2,
                            bookId = 1,
                            content = "The concept of saving and investing is examined, highlighting the impact of time and compound interest.",
                            pageNumber = 2
                        },
                        new
                        {
                            id = 3,
                            bookId = 1,
                            content = "We delve into common financial myths and the reality behind them, debunking misconceptions that can hinder financial growth.",
                            pageNumber = 3
                        },
                        new
                        {
                            id = 4,
                            bookId = 1,
                            content = "Emotional aspects of money management are discussed, emphasizing the need for awareness and discipline.",
                            pageNumber = 4
                        },
                        new
                        {
                            id = 5,
                            bookId = 1,
                            content = "The final chapter provides actionable steps to improve financial literacy and well-being.",
                            pageNumber = 5
                        },
                        new
                        {
                            id = 6,
                            bookId = 2,
                            content = "The Silent Patient begins with a shocking incident, setting the stage for a psychological thriller filled with twists and turns.",
                            pageNumber = 1
                        },
                        new
                        {
                            id = 7,
                            bookId = 2,
                            content = "We explore the protagonist's motivations and the dark secrets that unfold throughout the narrative.",
                            pageNumber = 2
                        },
                        new
                        {
                            id = 8,
                            bookId = 2,
                            content = "Themes of love, betrayal, and forgiveness are intricately woven into the story, making it a gripping read.",
                            pageNumber = 3
                        },
                        new
                        {
                            id = 9,
                            bookId = 2,
                            content = "The unreliable narrator challenges readers to question the truth behind the events.",
                            pageNumber = 4
                        },
                        new
                        {
                            id = 10,
                            bookId = 2,
                            content = "The climax leaves readers breathless, leading to a shocking revelation that ties all elements together.",
                            pageNumber = 5
                        },
                        new
                        {
                            id = 11,
                            bookId = 3,
                            content = "Educated recounts the author's journey from a strict upbringing in Idaho to pursuing higher education against all odds.",
                            pageNumber = 1
                        },
                        new
                        {
                            id = 12,
                            bookId = 3,
                            content = "The struggle for knowledge and identity forms the core of this compelling memoir.",
                            pageNumber = 2
                        },
                        new
                        {
                            id = 13,
                            bookId = 3,
                            content = "Key events in the author's life are portrayed with raw honesty and vulnerability.",
                            pageNumber = 3
                        },
                        new
                        {
                            id = 14,
                            bookId = 3,
                            content = "The challenges faced by the author serve as a powerful reminder of the importance of education.",
                            pageNumber = 4
                        },
                        new
                        {
                            id = 15,
                            bookId = 3,
                            content = "The memoir concludes with a reflection on personal growth and the value of resilience.",
                            pageNumber = 5
                        },
                        new
                        {
                            id = 16,
                            bookId = 4,
                            content = "Becoming tells the inspiring story of Michelle Obama, chronicling her life from childhood to the White House.",
                            pageNumber = 1
                        },
                        new
                        {
                            id = 17,
                            bookId = 4,
                            content = "The author shares personal anecdotes that resonate with themes of identity and self-discovery.",
                            pageNumber = 2
                        },
                        new
                        {
                            id = 18,
                            bookId = 4,
                            content = "The journey through her career and marriage showcases the challenges faced in the public eye.",
                            pageNumber = 3
                        },
                        new
                        {
                            id = 19,
                            bookId = 4,
                            content = "Advocacy for education and health issues becomes a focal point in her story.",
                            pageNumber = 4
                        },
                        new
                        {
                            id = 20,
                            bookId = 4,
                            content = "The memoir ends with a powerful message of hope and empowerment for future generations.",
                            pageNumber = 5
                        },
                        new
                        {
                            id = 21,
                            bookId = 5,
                            content = "The Alchemist is a magical tale about following one’s dreams and listening to one’s heart.",
                            pageNumber = 1
                        },
                        new
                        {
                            id = 22,
                            bookId = 5,
                            content = "The journey of Santiago, a young shepherd, serves as a metaphor for the quest for personal legend.",
                            pageNumber = 2
                        },
                        new
                        {
                            id = 23,
                            bookId = 5,
                            content = "The book emphasizes the significance of dreams and the courage to pursue them.",
                            pageNumber = 3
                        },
                        new
                        {
                            id = 24,
                            bookId = 5,
                            content = "Wisdom and the interconnectedness of the universe play key roles in the narrative.",
                            pageNumber = 4
                        },
                        new
                        {
                            id = 25,
                            bookId = 5,
                            content = "The conclusion inspires readers to realize their own dreams and take action.",
                            pageNumber = 5
                        },
                        new
                        {
                            id = 26,
                            bookId = 6,
                            content = "Sapiens provides a thought-provoking overview of human history and evolution.",
                            pageNumber = 1
                        },
                        new
                        {
                            id = 27,
                            bookId = 6,
                            content = "The author examines how Homo sapiens came to dominate the Earth and the implications of this power.",
                            pageNumber = 2
                        },
                        new
                        {
                            id = 28,
                            bookId = 6,
                            content = "Major events, such as the Agricultural Revolution, are analyzed in detail.",
                            pageNumber = 3
                        },
                        new
                        {
                            id = 29,
                            bookId = 6,
                            content = "The narrative challenges readers to think critically about humanity's future.",
                            pageNumber = 4
                        },
                        new
                        {
                            id = 30,
                            bookId = 6,
                            content = "The concluding chapter reflects on our place in the world and our responsibilities as a species.",
                            pageNumber = 5
                        },
                        new
                        {
                            id = 31,
                            bookId = 7,
                            content = "The Power of Habit explores the science behind why habits exist and how they can be changed.",
                            pageNumber = 1
                        },
                        new
                        {
                            id = 32,
                            bookId = 7,
                            content = "The author breaks down the habit loop: cue, routine, and reward.",
                            pageNumber = 2
                        },
                        new
                        {
                            id = 33,
                            bookId = 7,
                            content = "Real-life examples illustrate the power of habits in personal and professional life.",
                            pageNumber = 3
                        },
                        new
                        {
                            id = 34,
                            bookId = 7,
                            content = "Strategies for creating positive habits and breaking negative ones are presented.",
                            pageNumber = 4
                        },
                        new
                        {
                            id = 35,
                            bookId = 7,
                            content = "The final chapter emphasizes the importance of belief in changing habits.",
                            pageNumber = 5
                        },
                        new
                        {
                            id = 36,
                            bookId = 8,
                            content = "The Catcher in the Rye narrates the story of Holden Caulfield, a disenchanted teenager.",
                            pageNumber = 1
                        },
                        new
                        {
                            id = 37,
                            bookId = 8,
                            content = "Themes of alienation and rebellion permeate the narrative, reflecting teenage angst.",
                            pageNumber = 2
                        },
                        new
                        {
                            id = 38,
                            bookId = 8,
                            content = "Holden's perspective provides a critique of adult hypocrisy and societal expectations.",
                            pageNumber = 3
                        },
                        new
                        {
                            id = 39,
                            bookId = 8,
                            content = "Key moments highlight the struggle for identity and connection.",
                            pageNumber = 4
                        },
                        new
                        {
                            id = 40,
                            bookId = 8,
                            content = "The ending leaves readers contemplating the complexities of growing up.",
                            pageNumber = 5
                        },
                        new
                        {
                            id = 41,
                            bookId = 9,
                            content = "1984 depicts a dystopian future under totalitarian rule, exploring themes of surveillance and oppression.",
                            pageNumber = 1
                        },
                        new
                        {
                            id = 42,
                            bookId = 9,
                            content = "The protagonist, Winston Smith, grapples with the loss of individuality in a conformist society.",
                            pageNumber = 2
                        },
                        new
                        {
                            id = 43,
                            bookId = 9,
                            content = "The narrative challenges readers to reflect on the nature of freedom and truth.",
                            pageNumber = 3
                        },
                        new
                        {
                            id = 44,
                            bookId = 9,
                            content = "The struggle against oppressive regimes is a central theme that resonates in contemporary society.",
                            pageNumber = 4
                        },
                        new
                        {
                            id = 45,
                            bookId = 9,
                            content = "The conclusion leaves a lasting impact, urging readers to remain vigilant in preserving their freedoms.",
                            pageNumber = 5
                        },
                        new
                        {
                            id = 46,
                            bookId = 10,
                            content = "To Kill a Mockingbird presents a poignant exploration of racism and injustice in the American South.",
                            pageNumber = 1
                        },
                        new
                        {
                            id = 47,
                            bookId = 10,
                            content = "The story unfolds through the eyes of young Scout Finch, offering a unique perspective on moral growth.",
                            pageNumber = 2
                        },
                        new
                        {
                            id = 48,
                            bookId = 10,
                            content = "Key characters highlight the complexities of human behavior and social norms.",
                            pageNumber = 3
                        },
                        new
                        {
                            id = 49,
                            bookId = 10,
                            content = "The narrative emphasizes empathy and understanding as vital to combating prejudice.",
                            pageNumber = 4
                        },
                        new
                        {
                            id = 50,
                            bookId = 10,
                            content = "The conclusion underscores the importance of standing up for what is right, even in the face of adversity.",
                            pageNumber = 5
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.Point", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateOnly>("earnDate")
                        .HasColumnType("date");

                    b.Property<int>("point")
                        .HasColumnType("integer");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("Points");

                    b.HasData(
                        new
                        {
                            id = 1,
                            earnDate = new DateOnly(2024, 10, 2),
                            point = 10,
                            userId = 1
                        },
                        new
                        {
                            id = 2,
                            earnDate = new DateOnly(2024, 10, 1),
                            point = 20,
                            userId = 1
                        },
                        new
                        {
                            id = 3,
                            earnDate = new DateOnly(2024, 9, 30),
                            point = 15,
                            userId = 2
                        },
                        new
                        {
                            id = 4,
                            earnDate = new DateOnly(2024, 9, 29),
                            point = 25,
                            userId = 2
                        },
                        new
                        {
                            id = 5,
                            earnDate = new DateOnly(2024, 9, 28),
                            point = 30,
                            userId = 3
                        },
                        new
                        {
                            id = 6,
                            earnDate = new DateOnly(2024, 9, 27),
                            point = 40,
                            userId = 4
                        },
                        new
                        {
                            id = 7,
                            earnDate = new DateOnly(2024, 9, 26),
                            point = 50,
                            userId = 5
                        },
                        new
                        {
                            id = 8,
                            earnDate = new DateOnly(2024, 9, 25),
                            point = 60,
                            userId = 6
                        },
                        new
                        {
                            id = 9,
                            earnDate = new DateOnly(2024, 9, 24),
                            point = 70,
                            userId = 7
                        },
                        new
                        {
                            id = 10,
                            earnDate = new DateOnly(2024, 9, 23),
                            point = 80,
                            userId = 8
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.Punishment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("fineAmount")
                        .HasColumnType("integer");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("punishmentDate")
                        .HasColumnType("date");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("Punishments");

                    b.HasData(
                        new
                        {
                            id = 1,
                            fineAmount = 5,
                            isActive = true,
                            punishmentDate = new DateOnly(2024, 10, 2),
                            userId = 1
                        },
                        new
                        {
                            id = 2,
                            fineAmount = 10,
                            isActive = true,
                            punishmentDate = new DateOnly(2024, 10, 1),
                            userId = 2
                        },
                        new
                        {
                            id = 3,
                            fineAmount = 15,
                            isActive = false,
                            punishmentDate = new DateOnly(2024, 9, 30),
                            userId = 3
                        },
                        new
                        {
                            id = 4,
                            fineAmount = 20,
                            isActive = true,
                            punishmentDate = new DateOnly(2024, 9, 29),
                            userId = 4
                        },
                        new
                        {
                            id = 5,
                            fineAmount = 25,
                            isActive = false,
                            punishmentDate = new DateOnly(2024, 9, 28),
                            userId = 5
                        },
                        new
                        {
                            id = 6,
                            fineAmount = 30,
                            isActive = true,
                            punishmentDate = new DateOnly(2024, 9, 27),
                            userId = 6
                        },
                        new
                        {
                            id = 7,
                            fineAmount = 35,
                            isActive = true,
                            punishmentDate = new DateOnly(2024, 9, 26),
                            userId = 7
                        },
                        new
                        {
                            id = 8,
                            fineAmount = 40,
                            isActive = false,
                            punishmentDate = new DateOnly(2024, 9, 25),
                            userId = 8
                        },
                        new
                        {
                            id = 9,
                            fineAmount = 45,
                            isActive = true,
                            punishmentDate = new DateOnly(2024, 9, 24),
                            userId = 9
                        },
                        new
                        {
                            id = 10,
                            fineAmount = 50,
                            isActive = false,
                            punishmentDate = new DateOnly(2024, 9, 23),
                            userId = 10
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.RegisterRequest", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<bool>("confirmation")
                        .HasColumnType("boolean");

                    b.Property<bool>("pending")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("requestDate")
                        .HasColumnType("date");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("RegisterRequests");

                    b.HasData(
                        new
                        {
                            id = 1,
                            confirmation = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 10, 2),
                            userId = 1
                        },
                        new
                        {
                            id = 2,
                            confirmation = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 10, 1),
                            userId = 2
                        },
                        new
                        {
                            id = 3,
                            confirmation = true,
                            pending = false,
                            requestDate = new DateOnly(2024, 9, 30),
                            userId = 3
                        },
                        new
                        {
                            id = 4,
                            confirmation = true,
                            pending = false,
                            requestDate = new DateOnly(2024, 9, 29),
                            userId = 4
                        },
                        new
                        {
                            id = 5,
                            confirmation = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 9, 28),
                            userId = 5
                        },
                        new
                        {
                            id = 6,
                            confirmation = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 9, 27),
                            userId = 6
                        },
                        new
                        {
                            id = 7,
                            confirmation = true,
                            pending = false,
                            requestDate = new DateOnly(2024, 9, 26),
                            userId = 7
                        },
                        new
                        {
                            id = 8,
                            confirmation = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 9, 25),
                            userId = 8
                        },
                        new
                        {
                            id = 9,
                            confirmation = true,
                            pending = false,
                            requestDate = new DateOnly(2024, 9, 24),
                            userId = 9
                        },
                        new
                        {
                            id = 10,
                            confirmation = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 9, 23),
                            userId = 10
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.Role", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            id = 1,
                            name = "member"
                        },
                        new
                        {
                            id = 2,
                            name = "manager"
                        },
                        new
                        {
                            id = 3,
                            name = "staff"
                        },
                        new
                        {
                            id = 4,
                            name = "author"
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("roleId")
                        .HasColumnType("integer");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("userStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("roleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            id = 1,
                            email = "test1@example.com",
                            name = "Alice",
                            password = "pass123",
                            roleId = 1,
                            surname = "Smith",
                            userStatus = true,
                            username = "alice_smith"
                        },
                        new
                        {
                            id = 2,
                            email = "test2@example.com",
                            name = "Bob",
                            password = "pass234",
                            roleId = 1,
                            surname = "Brown",
                            userStatus = true,
                            username = "bob_brown"
                        },
                        new
                        {
                            id = 3,
                            email = "test3@example.com",
                            name = "Charlie",
                            password = "pass345",
                            roleId = 1,
                            surname = "Davis",
                            userStatus = true,
                            username = "charlie_davis"
                        },
                        new
                        {
                            id = 4,
                            email = "test4@example.com",
                            name = "Diana",
                            password = "pass456",
                            roleId = 1,
                            surname = "Evans",
                            userStatus = true,
                            username = "diana_evans"
                        },
                        new
                        {
                            id = 5,
                            email = "test5@example.com",
                            name = "Evan",
                            password = "pass567",
                            roleId = 1,
                            surname = "Foster",
                            userStatus = true,
                            username = "evan_foster"
                        },
                        new
                        {
                            id = 6,
                            email = "test6@example.com",
                            name = "Fiona",
                            password = "pass678",
                            roleId = 1,
                            surname = "Gates",
                            userStatus = true,
                            username = "fiona_gates"
                        },
                        new
                        {
                            id = 7,
                            email = "test7@example.com",
                            name = "George",
                            password = "pass789",
                            roleId = 1,
                            surname = "Harris",
                            userStatus = true,
                            username = "george_harris"
                        },
                        new
                        {
                            id = 8,
                            email = "test8@example.com",
                            name = "Hannah",
                            password = "pass890",
                            roleId = 1,
                            surname = "Irwin",
                            userStatus = true,
                            username = "hannah_irwin"
                        },
                        new
                        {
                            id = 9,
                            email = "test9@example.com",
                            name = "Isaac",
                            password = "pass901",
                            roleId = 1,
                            surname = "Jones",
                            userStatus = true,
                            username = "isaac_jones"
                        },
                        new
                        {
                            id = 10,
                            email = "test10@example.com",
                            name = "Jack",
                            password = "pass012",
                            roleId = 1,
                            surname = "King",
                            userStatus = true,
                            username = "jack_king"
                        },
                        new
                        {
                            id = 11,
                            email = "test11@example.com",
                            name = "Feyza",
                            password = "123",
                            roleId = 1,
                            surname = "Beyaztaş",
                            userStatus = true,
                            username = "member"
                        },
                        new
                        {
                            id = 12,
                            email = "test12@example.com",
                            name = "Türker",
                            password = "123",
                            roleId = 2,
                            surname = "Kıvılcım",
                            userStatus = true,
                            username = "manager"
                        },
                        new
                        {
                            id = 13,
                            email = "test13@example.com",
                            name = "Fatih",
                            password = "123",
                            roleId = 3,
                            surname = "Çağdaş",
                            userStatus = true,
                            username = "staff"
                        },
                        new
                        {
                            id = 14,
                            email = "test14@example.com",
                            name = "Zehra",
                            password = "123",
                            roleId = 4,
                            surname = "Ülker",
                            userStatus = true,
                            username = "author"
                        },
                        new
                        {
                            id = 15,
                            email = "test14@example.com",
                            name = "Özge",
                            password = "123",
                            roleId = 4,
                            surname = "Nur",
                            userStatus = true,
                            username = "author2"
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.BookAuthor", b =>
                {
                    b.HasOne("libraryApp.backend.Entity.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("bookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("libraryApp.backend.Entity.User", "User")
                        .WithMany("BookAuthors")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("libraryApp.backend.Entity.BookPublishRequest", b =>
                {
                    b.HasOne("libraryApp.backend.Entity.Book", "Book")
                        .WithMany("BookPublishRequests")
                        .HasForeignKey("bookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("libraryApp.backend.Entity.User", "User")
                        .WithMany("BookPublisRequests")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("libraryApp.backend.Entity.LoanRequest", b =>
                {
                    b.HasOne("libraryApp.backend.Entity.Book", "Book")
                        .WithMany("LoanRequest")
                        .HasForeignKey("bookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("libraryApp.backend.Entity.User", "User")
                        .WithMany("LoanRequests")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("libraryApp.backend.Entity.Message", b =>
                {
                    b.HasOne("libraryApp.backend.Entity.User", "sender")
                        .WithMany("Messages")
                        .HasForeignKey("senderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("sender");
                });

            modelBuilder.Entity("libraryApp.backend.Entity.Page", b =>
                {
                    b.HasOne("libraryApp.backend.Entity.Book", "Book")
                        .WithMany("Pages")
                        .HasForeignKey("bookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("libraryApp.backend.Entity.Point", b =>
                {
                    b.HasOne("libraryApp.backend.Entity.User", "User")
                        .WithMany("Points")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("libraryApp.backend.Entity.Punishment", b =>
                {
                    b.HasOne("libraryApp.backend.Entity.User", "User")
                        .WithMany("Punishments")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("libraryApp.backend.Entity.RegisterRequest", b =>
                {
                    b.HasOne("libraryApp.backend.Entity.User", "User")
                        .WithMany("RegisterRequests")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("libraryApp.backend.Entity.User", b =>
                {
                    b.HasOne("libraryApp.backend.Entity.Role", "Role")
                        .WithMany()
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("libraryApp.backend.Entity.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("BookPublishRequests");

                    b.Navigation("LoanRequest");

                    b.Navigation("Pages");
                });

            modelBuilder.Entity("libraryApp.backend.Entity.User", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("BookPublisRequests");

                    b.Navigation("LoanRequests");

                    b.Navigation("Messages");

                    b.Navigation("Points");

                    b.Navigation("Punishments");

                    b.Navigation("RegisterRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
