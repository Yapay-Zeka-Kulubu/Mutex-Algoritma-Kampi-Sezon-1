// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using libraryApp.backend.Entity;

#nullable disable

namespace libraryApp.backend.Migrations
{
    [DbContext(typeof(libraryDBContext))]
    [Migration("20241002111753_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("libraryApp.backend.Entity.ceza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("CezaAktifMi")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CezaBitisGunu")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CezaGunu")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("cezalar");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CezaAktifMi = false,
                            CezaBitisGunu = new DateTime(2024, 9, 12, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9521),
                            CezaGunu = new DateTime(2024, 9, 2, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9515),
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            CezaAktifMi = false,
                            CezaBitisGunu = new DateTime(2024, 8, 13, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9523),
                            CezaGunu = new DateTime(2024, 8, 3, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9522),
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            CezaAktifMi = true,
                            CezaBitisGunu = new DateTime(2024, 9, 27, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9525),
                            CezaGunu = new DateTime(2024, 9, 22, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9524),
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            CezaAktifMi = false,
                            CezaBitisGunu = new DateTime(2024, 9, 17, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9526),
                            CezaGunu = new DateTime(2024, 9, 7, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9526),
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            CezaAktifMi = true,
                            CezaBitisGunu = new DateTime(2024, 9, 2, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9528),
                            CezaGunu = new DateTime(2024, 8, 23, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9527),
                            UserId = 6
                        },
                        new
                        {
                            Id = 6,
                            CezaAktifMi = false,
                            CezaBitisGunu = new DateTime(2024, 8, 3, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9529),
                            CezaGunu = new DateTime(2024, 7, 24, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9529),
                            UserId = 7
                        },
                        new
                        {
                            Id = 7,
                            CezaAktifMi = true,
                            CezaBitisGunu = new DateTime(2024, 10, 7, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9531),
                            CezaGunu = new DateTime(2024, 9, 27, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9530),
                            UserId = 8
                        },
                        new
                        {
                            Id = 8,
                            CezaAktifMi = false,
                            CezaBitisGunu = new DateTime(2024, 7, 4, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9532),
                            CezaGunu = new DateTime(2024, 6, 24, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9532),
                            UserId = 9
                        },
                        new
                        {
                            Id = 9,
                            CezaAktifMi = true,
                            CezaBitisGunu = new DateTime(2024, 9, 22, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9534),
                            CezaGunu = new DateTime(2024, 9, 12, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9533),
                            UserId = 10
                        },
                        new
                        {
                            Id = 10,
                            CezaAktifMi = false,
                            CezaBitisGunu = new DateTime(2024, 9, 7, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9535),
                            CezaGunu = new DateTime(2024, 8, 28, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9535),
                            UserId = 11
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.hesapAcmaTalebi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("BeklemedeMi")
                        .HasColumnType("boolean");

                    b.Property<bool>("OnaylandiMi")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("TalepTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("hesapAcmaTalepleri");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BeklemedeMi = false,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 9, 27, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9661),
                            UserId = 4
                        },
                        new
                        {
                            Id = 2,
                            BeklemedeMi = false,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 9, 22, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9662),
                            UserId = 5
                        },
                        new
                        {
                            Id = 3,
                            BeklemedeMi = true,
                            OnaylandiMi = false,
                            TalepTarihi = new DateTime(2024, 9, 17, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9664),
                            UserId = 6
                        },
                        new
                        {
                            Id = 4,
                            BeklemedeMi = false,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 9, 12, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9665),
                            UserId = 7
                        },
                        new
                        {
                            Id = 5,
                            BeklemedeMi = true,
                            OnaylandiMi = false,
                            TalepTarihi = new DateTime(2024, 9, 7, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9666),
                            UserId = 8
                        },
                        new
                        {
                            Id = 6,
                            BeklemedeMi = false,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 9, 2, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9667),
                            UserId = 9
                        },
                        new
                        {
                            Id = 7,
                            BeklemedeMi = true,
                            OnaylandiMi = false,
                            TalepTarihi = new DateTime(2024, 8, 28, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9675),
                            UserId = 10
                        },
                        new
                        {
                            Id = 8,
                            BeklemedeMi = false,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 8, 23, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9676),
                            UserId = 11
                        },
                        new
                        {
                            Id = 9,
                            BeklemedeMi = true,
                            OnaylandiMi = false,
                            TalepTarihi = new DateTime(2024, 8, 18, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9677),
                            UserId = 12
                        },
                        new
                        {
                            Id = 10,
                            BeklemedeMi = false,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 8, 13, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9678),
                            UserId = 13
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.kitap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Isim")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("KitapYayinlandiMi")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("YayinlanmaTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("kitaplar");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Isim = "The Art of Coding",
                            KitapYayinlandiMi = true,
                            YayinlanmaTarihi = new DateTime(2023, 10, 3, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9721)
                        },
                        new
                        {
                            Id = 2,
                            Isim = "Learning C#",
                            KitapYayinlandiMi = true,
                            YayinlanmaTarihi = new DateTime(2023, 8, 29, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9722)
                        },
                        new
                        {
                            Id = 3,
                            Isim = "Mastering ASP.NET",
                            KitapYayinlandiMi = true,
                            YayinlanmaTarihi = new DateTime(2023, 5, 21, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9723)
                        },
                        new
                        {
                            Id = 4,
                            Isim = "Entity Framework Core",
                            KitapYayinlandiMi = true,
                            YayinlanmaTarihi = new DateTime(2024, 3, 16, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9724)
                        },
                        new
                        {
                            Id = 5,
                            Isim = "React for Beginners",
                            KitapYayinlandiMi = true,
                            YayinlanmaTarihi = new DateTime(2023, 12, 7, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9725)
                        },
                        new
                        {
                            Id = 6,
                            Isim = "Advanced SQL",
                            KitapYayinlandiMi = true,
                            YayinlanmaTarihi = new DateTime(2024, 5, 5, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9726)
                        },
                        new
                        {
                            Id = 7,
                            Isim = "JavaScript in Depth",
                            KitapYayinlandiMi = true,
                            YayinlanmaTarihi = new DateTime(2023, 2, 10, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9727)
                        },
                        new
                        {
                            Id = 8,
                            Isim = "Mastering Python",
                            KitapYayinlandiMi = true,
                            YayinlanmaTarihi = new DateTime(2024, 6, 24, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9728)
                        },
                        new
                        {
                            Id = 9,
                            Isim = "CSS: The Definitive Guide",
                            KitapYayinlandiMi = true,
                            YayinlanmaTarihi = new DateTime(2024, 1, 26, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9729)
                        },
                        new
                        {
                            Id = 10,
                            Isim = "HTML5 & CSS3",
                            KitapYayinlandiMi = true,
                            YayinlanmaTarihi = new DateTime(2023, 11, 17, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9730)
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.kitapOdunc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("BeklemedeMi")
                        .HasColumnType("boolean");

                    b.Property<bool>("DondurulduMu")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DonusTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("KitapId")
                        .HasColumnType("integer");

                    b.Property<bool>("OnaylandiMi")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("TalepTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("KitapId");

                    b.HasIndex("UserId");

                    b.ToTable("kitapOduncler");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BeklemedeMi = false,
                            DondurulduMu = false,
                            DonusTarihi = new DateTime(2024, 10, 9, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9753),
                            KitapId = 1,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 9, 25, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9752),
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            BeklemedeMi = false,
                            DondurulduMu = false,
                            DonusTarihi = new DateTime(2024, 10, 8, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9755),
                            KitapId = 2,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 9, 24, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9754),
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            BeklemedeMi = false,
                            DondurulduMu = false,
                            DonusTarihi = new DateTime(2024, 10, 7, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9757),
                            KitapId = 3,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 9, 23, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9756),
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            BeklemedeMi = false,
                            DondurulduMu = false,
                            DonusTarihi = new DateTime(2024, 10, 6, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9759),
                            KitapId = 4,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 9, 22, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9758),
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            BeklemedeMi = false,
                            DondurulduMu = false,
                            DonusTarihi = new DateTime(2024, 10, 5, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9760),
                            KitapId = 5,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 9, 21, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9760),
                            UserId = 6
                        },
                        new
                        {
                            Id = 6,
                            BeklemedeMi = false,
                            DondurulduMu = false,
                            DonusTarihi = new DateTime(2024, 10, 4, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9762),
                            KitapId = 6,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 9, 20, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9762),
                            UserId = 7
                        },
                        new
                        {
                            Id = 7,
                            BeklemedeMi = false,
                            DondurulduMu = false,
                            DonusTarihi = new DateTime(2024, 10, 3, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9764),
                            KitapId = 7,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 9, 19, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9764),
                            UserId = 8
                        },
                        new
                        {
                            Id = 8,
                            BeklemedeMi = false,
                            DondurulduMu = false,
                            DonusTarihi = new DateTime(2024, 10, 1, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9766),
                            KitapId = 8,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 9, 18, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9765),
                            UserId = 9
                        },
                        new
                        {
                            Id = 9,
                            BeklemedeMi = false,
                            DondurulduMu = false,
                            DonusTarihi = new DateTime(2024, 9, 30, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9767),
                            KitapId = 9,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 9, 17, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9767),
                            UserId = 10
                        },
                        new
                        {
                            Id = 10,
                            BeklemedeMi = false,
                            DondurulduMu = false,
                            DonusTarihi = new DateTime(2024, 9, 29, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9769),
                            KitapId = 10,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 9, 16, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9769),
                            UserId = 11
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.kitapYayinTalebi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("BeklemedeMi")
                        .HasColumnType("boolean");

                    b.Property<int>("KitapId")
                        .HasColumnType("integer");

                    b.Property<bool>("OnaylandiMi")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("TalepTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("YazarId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("KitapId");

                    b.HasIndex("YazarId");

                    b.ToTable("kitapYayinTalepleri");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BeklemedeMi = false,
                            KitapId = 1,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 9, 29, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9796),
                            YazarId = 1
                        },
                        new
                        {
                            Id = 2,
                            BeklemedeMi = false,
                            KitapId = 2,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 9, 24, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9798),
                            YazarId = 2
                        },
                        new
                        {
                            Id = 3,
                            BeklemedeMi = false,
                            KitapId = 3,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 9, 22, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9799),
                            YazarId = 3
                        },
                        new
                        {
                            Id = 4,
                            BeklemedeMi = false,
                            KitapId = 4,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 9, 20, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9801),
                            YazarId = 4
                        },
                        new
                        {
                            Id = 5,
                            BeklemedeMi = true,
                            KitapId = 5,
                            OnaylandiMi = false,
                            TalepTarihi = new DateTime(2024, 9, 17, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9802),
                            YazarId = 5
                        },
                        new
                        {
                            Id = 6,
                            BeklemedeMi = false,
                            KitapId = 6,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 9, 14, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9803),
                            YazarId = 6
                        },
                        new
                        {
                            Id = 7,
                            BeklemedeMi = false,
                            KitapId = 7,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 9, 12, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9804),
                            YazarId = 7
                        },
                        new
                        {
                            Id = 8,
                            BeklemedeMi = true,
                            KitapId = 8,
                            OnaylandiMi = false,
                            TalepTarihi = new DateTime(2024, 9, 10, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9805),
                            YazarId = 8
                        },
                        new
                        {
                            Id = 9,
                            BeklemedeMi = false,
                            KitapId = 9,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 9, 7, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9806),
                            YazarId = 9
                        },
                        new
                        {
                            Id = 10,
                            BeklemedeMi = true,
                            KitapId = 10,
                            OnaylandiMi = false,
                            TalepTarihi = new DateTime(2024, 9, 4, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9807),
                            YazarId = 10
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.kitapYazari", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("KitapId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("KitapId");

                    b.HasIndex("UserId");

                    b.ToTable("kitapYazarlari");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            KitapId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            KitapId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            KitapId = 3,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            KitapId = 4,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            KitapId = 5,
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            KitapId = 6,
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            KitapId = 7,
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            KitapId = 8,
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            KitapId = 9,
                            UserId = 9
                        },
                        new
                        {
                            Id = 10,
                            KitapId = 10,
                            UserId = 10
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.mesaj", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlanId")
                        .HasColumnType("integer");

                    b.Property<int>("GonderenId")
                        .HasColumnType("integer");

                    b.Property<string>("Icerik")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Konu")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GonderenId");

                    b.ToTable("mesajlar");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlanId = 1,
                            GonderenId = 2,
                            Icerik = "Merhaba!",
                            Konu = "Tanışma"
                        },
                        new
                        {
                            Id = 2,
                            AlanId = 3,
                            GonderenId = 4,
                            Icerik = "Kitap öneriniz var mı?",
                            Konu = "Öneri"
                        },
                        new
                        {
                            Id = 3,
                            AlanId = 5,
                            GonderenId = 6,
                            Icerik = "Teşekkür ederim!",
                            Konu = "Teşekkür"
                        },
                        new
                        {
                            Id = 4,
                            AlanId = 7,
                            GonderenId = 8,
                            Icerik = "Görüşürüz.",
                            Konu = "Veda"
                        },
                        new
                        {
                            Id = 5,
                            AlanId = 9,
                            GonderenId = 10,
                            Icerik = "Nasıl yardımcı olabilirim?",
                            Konu = "Yardım"
                        },
                        new
                        {
                            Id = 6,
                            AlanId = 2,
                            GonderenId = 3,
                            Icerik = "Sorun nedir?",
                            Konu = "Sorun"
                        },
                        new
                        {
                            Id = 7,
                            AlanId = 4,
                            GonderenId = 5,
                            Icerik = "Günaydın!",
                            Konu = "Selamlaşma"
                        },
                        new
                        {
                            Id = 8,
                            AlanId = 6,
                            GonderenId = 7,
                            Icerik = "Neler yapıyorsun?",
                            Konu = "Sohbet"
                        },
                        new
                        {
                            Id = 9,
                            AlanId = 8,
                            GonderenId = 9,
                            Icerik = "Kitap aldım.",
                            Konu = "Bilgilendirme"
                        },
                        new
                        {
                            Id = 10,
                            AlanId = 10,
                            GonderenId = 11,
                            Icerik = "Yeni kitabım yayımlandı.",
                            Konu = "Kitap Yayını"
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.puan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("KazanilanPuan")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PuanGunu")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("puanlar");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            KazanilanPuan = 1000,
                            PuanGunu = new DateTime(2024, 10, 1, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9917),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            KazanilanPuan = 500,
                            PuanGunu = new DateTime(2024, 9, 27, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9918),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            KazanilanPuan = 2000,
                            PuanGunu = new DateTime(2024, 9, 22, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9920),
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            KazanilanPuan = 1500,
                            PuanGunu = new DateTime(2024, 9, 17, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9921),
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            KazanilanPuan = 800,
                            PuanGunu = new DateTime(2024, 9, 12, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9922),
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            KazanilanPuan = 1200,
                            PuanGunu = new DateTime(2024, 9, 7, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9923),
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            KazanilanPuan = 700,
                            PuanGunu = new DateTime(2024, 9, 2, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9924),
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            KazanilanPuan = 900,
                            PuanGunu = new DateTime(2024, 8, 28, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9925),
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            KazanilanPuan = 1600,
                            PuanGunu = new DateTime(2024, 8, 23, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9926),
                            UserId = 9
                        },
                        new
                        {
                            Id = 10,
                            KazanilanPuan = 1100,
                            PuanGunu = new DateTime(2024, 8, 18, 11, 17, 51, 392, DateTimeKind.Utc).AddTicks(9927),
                            UserId = 10
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("RolIsmi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("roller");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RolIsmi = "uye"
                        },
                        new
                        {
                            Id = 2,
                            RolIsmi = "yazar"
                        },
                        new
                        {
                            Id = 3,
                            RolIsmi = "gorevli"
                        },
                        new
                        {
                            Id = 4,
                            RolIsmi = "yonetici"
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.sayfa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Icerik")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("KitapId")
                        .HasColumnType("integer");

                    b.Property<int>("SayfaNo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("KitapId");

                    b.ToTable("sayfalar");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Icerik = "Introduction to Coding: Coding is the process of using a programming language to get a computer to behave how you want. In this chapter, we will cover the basics of what coding is and how it works.",
                            KitapId = 1,
                            SayfaNo = 1
                        },
                        new
                        {
                            Id = 2,
                            Icerik = "Coding Basics: Understanding syntax, variables, loops, and functions is essential in every programming language. We'll explore how these basic building blocks work in various coding languages.",
                            KitapId = 1,
                            SayfaNo = 2
                        },
                        new
                        {
                            Id = 3,
                            Icerik = "Advanced Coding Techniques: Once you grasp the basics, you can start using more advanced techniques like recursion, data structures, and algorithms to optimize your code.",
                            KitapId = 1,
                            SayfaNo = 3
                        },
                        new
                        {
                            Id = 4,
                            Icerik = "Debugging Tips: Debugging is a critical skill for every developer. This chapter focuses on tools and techniques for identifying and resolving issues in your code.",
                            KitapId = 1,
                            SayfaNo = 4
                        },
                        new
                        {
                            Id = 5,
                            Icerik = "Best Practices: Writing clean, efficient, and maintainable code is the hallmark of a skilled developer. We’ll explore best practices that will help you become a better programmer.",
                            KitapId = 1,
                            SayfaNo = 5
                        },
                        new
                        {
                            Id = 6,
                            Icerik = "Introduction to C#: C# is a modern, object-oriented programming language developed by Microsoft. In this chapter, we’ll cover the basics of the C# language and its history.",
                            KitapId = 2,
                            SayfaNo = 1
                        },
                        new
                        {
                            Id = 7,
                            Icerik = "Data Types: In C#, there are many different types of data such as int, string, and bool. This chapter explains the various data types available in C# and how to use them.",
                            KitapId = 2,
                            SayfaNo = 2
                        },
                        new
                        {
                            Id = 8,
                            Icerik = "Control Structures: Control structures help manage the flow of execution in your program. We will dive into if-else statements, loops, and switch cases in this chapter.",
                            KitapId = 2,
                            SayfaNo = 3
                        },
                        new
                        {
                            Id = 9,
                            Icerik = "Object-Oriented Programming: One of C#’s key strengths is its object-oriented nature. This chapter will teach you the principles of OOP such as inheritance, polymorphism, and encapsulation.",
                            KitapId = 2,
                            SayfaNo = 4
                        },
                        new
                        {
                            Id = 10,
                            Icerik = "Error Handling: Proper error handling is important to ensure the stability of your application. Learn how to use try-catch blocks and handle exceptions effectively.",
                            KitapId = 2,
                            SayfaNo = 5
                        },
                        new
                        {
                            Id = 11,
                            Icerik = "Web Development: This chapter introduces the key concepts of web development, including HTML, CSS, and JavaScript, which are the foundation of building websites.",
                            KitapId = 3,
                            SayfaNo = 1
                        },
                        new
                        {
                            Id = 12,
                            Icerik = "Front-End Frameworks: Explore the world of front-end development by learning about popular frameworks like React and Angular, and how they simplify web development.",
                            KitapId = 3,
                            SayfaNo = 2
                        },
                        new
                        {
                            Id = 13,
                            Icerik = "Back-End Development: Learn about server-side programming, database management, and APIs to build the back-end of a web application.",
                            KitapId = 3,
                            SayfaNo = 3
                        },
                        new
                        {
                            Id = 14,
                            Icerik = "Database Integration: This chapter focuses on how to integrate databases like SQL Server or MongoDB into your web applications.",
                            KitapId = 3,
                            SayfaNo = 4
                        },
                        new
                        {
                            Id = 15,
                            Icerik = "Deployment and Hosting: After building a web application, the final step is to deploy it. Learn about cloud services and how to host your application for the public.",
                            KitapId = 3,
                            SayfaNo = 5
                        },
                        new
                        {
                            Id = 16,
                            Icerik = "Python Basics: Python is a versatile language popular for both beginners and experts. In this chapter, we will introduce Python syntax and basic concepts.",
                            KitapId = 4,
                            SayfaNo = 1
                        },
                        new
                        {
                            Id = 17,
                            Icerik = "Data Structures in Python: Learn about lists, dictionaries, sets, and tuples, and how to use them effectively in your Python programs.",
                            KitapId = 4,
                            SayfaNo = 2
                        },
                        new
                        {
                            Id = 18,
                            Icerik = "File Handling in Python: Discover how to read from and write to files in Python, which is essential for many data processing tasks.",
                            KitapId = 4,
                            SayfaNo = 3
                        },
                        new
                        {
                            Id = 19,
                            Icerik = "Python Libraries: Python has a vast ecosystem of libraries such as NumPy, Pandas, and Matplotlib. Learn how to leverage these libraries in your projects.",
                            KitapId = 4,
                            SayfaNo = 4
                        },
                        new
                        {
                            Id = 20,
                            Icerik = "Web Scraping with Python: This chapter explores how to extract data from websites using popular libraries such as BeautifulSoup and Scrapy.",
                            KitapId = 4,
                            SayfaNo = 5
                        },
                        new
                        {
                            Id = 21,
                            Icerik = "Introduction to Algorithms: Algorithms are a set of rules to be followed in problem-solving operations. This chapter introduces basic algorithms and their use cases.",
                            KitapId = 5,
                            SayfaNo = 1
                        },
                        new
                        {
                            Id = 22,
                            Icerik = "Sorting Algorithms: Learn about various sorting algorithms such as Bubble Sort, Quick Sort, and Merge Sort, and their time complexities.",
                            KitapId = 5,
                            SayfaNo = 2
                        },
                        new
                        {
                            Id = 23,
                            Icerik = "Search Algorithms: Understand how to implement search algorithms like Binary Search and Linear Search for finding elements in data.",
                            KitapId = 5,
                            SayfaNo = 3
                        },
                        new
                        {
                            Id = 24,
                            Icerik = "Graph Algorithms: Explore algorithms related to graph data structures, such as Dijkstra’s algorithm and Depth-First Search.",
                            KitapId = 5,
                            SayfaNo = 4
                        },
                        new
                        {
                            Id = 25,
                            Icerik = "Dynamic Programming: Dynamic programming is an optimization technique used to solve complex problems by breaking them down into simpler subproblems.",
                            KitapId = 5,
                            SayfaNo = 5
                        },
                        new
                        {
                            Id = 26,
                            Icerik = "Introduction to Artificial Intelligence: AI is transforming the world. This chapter introduces the basics of AI and how machines learn from data.",
                            KitapId = 6,
                            SayfaNo = 1
                        },
                        new
                        {
                            Id = 27,
                            Icerik = "Machine Learning Fundamentals: Discover how machine learning models are created, trained, and used to predict outcomes.",
                            KitapId = 6,
                            SayfaNo = 2
                        },
                        new
                        {
                            Id = 28,
                            Icerik = "Neural Networks: Neural networks are the backbone of deep learning. Learn about how they function and why they're so powerful.",
                            KitapId = 6,
                            SayfaNo = 3
                        },
                        new
                        {
                            Id = 29,
                            Icerik = "Natural Language Processing: Explore how AI is used to process and understand human language, including applications like chatbots and translation services.",
                            KitapId = 6,
                            SayfaNo = 4
                        },
                        new
                        {
                            Id = 30,
                            Icerik = "AI Ethics: AI has profound societal implications. This chapter discusses the ethical considerations involved in creating and using AI technologies.",
                            KitapId = 6,
                            SayfaNo = 5
                        },
                        new
                        {
                            Id = 31,
                            Icerik = "Introduction to Cloud Computing: Cloud computing has revolutionized IT. This chapter introduces the key concepts of cloud platforms and services.",
                            KitapId = 7,
                            SayfaNo = 1
                        },
                        new
                        {
                            Id = 32,
                            Icerik = "AWS Fundamentals: Amazon Web Services (AWS) is one of the most popular cloud platforms. Learn about the core AWS services and their applications.",
                            KitapId = 7,
                            SayfaNo = 2
                        },
                        new
                        {
                            Id = 33,
                            Icerik = "Azure Overview: Microsoft Azure is another leading cloud platform. Discover its features and how it differs from AWS.",
                            KitapId = 7,
                            SayfaNo = 3
                        },
                        new
                        {
                            Id = 34,
                            Icerik = "Deploying Applications to the Cloud: This chapter covers the steps involved in deploying web applications to the cloud, ensuring scalability and reliability.",
                            KitapId = 7,
                            SayfaNo = 4
                        },
                        new
                        {
                            Id = 35,
                            Icerik = "Security in the Cloud: Cloud security is crucial. Learn about the key strategies for securing cloud-based applications and data.",
                            KitapId = 7,
                            SayfaNo = 5
                        },
                        new
                        {
                            Id = 36,
                            Icerik = "Data Science Overview: Data science is the process of deriving insights from data. This chapter introduces key data science concepts and techniques.",
                            KitapId = 8,
                            SayfaNo = 1
                        },
                        new
                        {
                            Id = 37,
                            Icerik = "Data Cleaning and Preparation: Learn the importance of cleaning and preparing data before analysis, and the tools used for this purpose.",
                            KitapId = 8,
                            SayfaNo = 2
                        },
                        new
                        {
                            Id = 38,
                            Icerik = "Exploratory Data Analysis: EDA helps uncover patterns and trends in data. This chapter covers the methods used for analyzing and visualizing data.",
                            KitapId = 8,
                            SayfaNo = 3
                        },
                        new
                        {
                            Id = 39,
                            Icerik = "Statistical Modeling: Understand how statistical models are created and used to make predictions based on data.",
                            KitapId = 8,
                            SayfaNo = 4
                        },
                        new
                        {
                            Id = 40,
                            Icerik = "Data Visualization: Effective data visualization helps communicate findings clearly. Learn about different techniques for visualizing data.",
                            KitapId = 8,
                            SayfaNo = 5
                        },
                        new
                        {
                            Id = 41,
                            Icerik = "Cybersecurity Basics: Cybersecurity is critical in today’s digital world. This chapter provides an introduction to the field of cybersecurity.",
                            KitapId = 9,
                            SayfaNo = 1
                        },
                        new
                        {
                            Id = 42,
                            Icerik = "Types of Cyber Attacks: Learn about common types of cyber attacks such as phishing, malware, and ransomware.",
                            KitapId = 9,
                            SayfaNo = 2
                        },
                        new
                        {
                            Id = 43,
                            Icerik = "Security Protocols: Security protocols like SSL/TLS and HTTPS are vital for protecting online communication. This chapter explains how these protocols work.",
                            KitapId = 9,
                            SayfaNo = 3
                        },
                        new
                        {
                            Id = 44,
                            Icerik = "Network Security: Explore how firewalls, intrusion detection systems, and VPNs are used to secure networks from cyber threats.",
                            KitapId = 9,
                            SayfaNo = 4
                        },
                        new
                        {
                            Id = 45,
                            Icerik = "Best Practices for Cybersecurity: Learn about the best practices that individuals and organizations can follow to ensure their systems remain secure.",
                            KitapId = 9,
                            SayfaNo = 5
                        },
                        new
                        {
                            Id = 46,
                            Icerik = "Introduction to Blockchain: Blockchain technology is transforming industries. This chapter explains how blockchain works and its key features.",
                            KitapId = 10,
                            SayfaNo = 1
                        },
                        new
                        {
                            Id = 47,
                            Icerik = "Cryptocurrency: Learn about the rise of cryptocurrencies like Bitcoin and Ethereum, and how they leverage blockchain technology.",
                            KitapId = 10,
                            SayfaNo = 2
                        },
                        new
                        {
                            Id = 48,
                            Icerik = "Smart Contracts: Discover how smart contracts are enabling new applications on blockchain platforms like Ethereum.",
                            KitapId = 10,
                            SayfaNo = 3
                        },
                        new
                        {
                            Id = 49,
                            Icerik = "Blockchain Use Cases: Explore real-world use cases of blockchain in industries such as finance, healthcare, and supply chain.",
                            KitapId = 10,
                            SayfaNo = 4
                        },
                        new
                        {
                            Id = 50,
                            Icerik = "Future of Blockchain: What does the future hold for blockchain? This chapter discusses emerging trends and challenges.",
                            KitapId = 10,
                            SayfaNo = 5
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.user", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Isim")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RolId")
                        .HasColumnType("integer");

                    b.Property<string>("SoyIsim")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RolId");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ahmet.yilmaz@example.com",
                            Isim = "Ahmet",
                            Password = "$2a$11$U2Pl6W.DuVQ9RiUoA.KTGuiWAHZpSFA/HpQFUpVi4dGwfnhMY.lnq",
                            RolId = 1,
                            SoyIsim = "Yılmaz"
                        },
                        new
                        {
                            Id = 2,
                            Email = "mehmet.kaya@example.com",
                            Isim = "Mehmet",
                            Password = "$2a$11$CYeDfDJOeLv5xUcD6LOmUef10VAGieYf8iUJayt9N72hCR6zeedke",
                            RolId = 2,
                            SoyIsim = "Kaya"
                        },
                        new
                        {
                            Id = 3,
                            Email = "ayse.demir@example.com",
                            Isim = "Ayşe",
                            Password = "$2a$11$hmVhgJtFjzx97oO4FrVdDu06LygBGu7n7LWs9XeQIBfHbqZBMxNGW",
                            RolId = 3,
                            SoyIsim = "Demir"
                        },
                        new
                        {
                            Id = 4,
                            Email = "fatma.celik@example.com",
                            Isim = "Fatma",
                            Password = "$2a$11$s/b74SPh6RVHD.vtozs/PeXtI2vCcoCGhmAyoUnhQMQtuBzdWOiQW",
                            RolId = 4,
                            SoyIsim = "Çelik"
                        },
                        new
                        {
                            Id = 5,
                            Email = "ali.ozturk@example.com",
                            Isim = "Ali",
                            Password = "$2a$11$wJJoMYAq.2i8LnS8dBzzS.0MuExPmjs7re8XEseVWZthwE4kr15gK",
                            RolId = 1,
                            SoyIsim = "Öztürk"
                        },
                        new
                        {
                            Id = 6,
                            Email = "zeynep.aksoy@example.com",
                            Isim = "Zeynep",
                            Password = "$2a$11$3aps3qrqCCv8/gu9Zw0CiON2PJ5LsdeU3RTr7FJFrKsUa3unx/sAq",
                            RolId = 2,
                            SoyIsim = "Aksoy"
                        },
                        new
                        {
                            Id = 7,
                            Email = "emre.guner@example.com",
                            Isim = "Emre",
                            Password = "$2a$11$IJf1l9yOO5vBwDBkuEqR6.5tKU7.hL5jrFkLEWcEK/ZT4F54RL5hC",
                            RolId = 3,
                            SoyIsim = "Güner"
                        },
                        new
                        {
                            Id = 8,
                            Email = "elif.yilmaz@example.com",
                            Isim = "Elif",
                            Password = "$2a$11$LB2Ux/aPyOQ86A3sTBob9OGTzrbSn41B4Se9hdl/eeBEmPAq4ELKK",
                            RolId = 4,
                            SoyIsim = "Yılmaz"
                        },
                        new
                        {
                            Id = 9,
                            Email = "cem.koc@example.com",
                            Isim = "Cem",
                            Password = "$2a$11$Tz5AKBWqUuWTIJCPVc/cbuudN1DvnkfknbDYecrhy.vGgh9hJe.Qm",
                            RolId = 1,
                            SoyIsim = "Koç"
                        },
                        new
                        {
                            Id = 10,
                            Email = "merve.tan@example.com",
                            Isim = "Merve",
                            Password = "$2a$11$SMDAsqBLEF5wT0jyqRbGYukbR9363NPkyB.lZWD3BR2lCFxUWyGnS",
                            RolId = 2,
                            SoyIsim = "Tan"
                        },
                        new
                        {
                            Id = 11,
                            Email = "yonetici@example.com",
                            Isim = "Türker",
                            Password = "$2a$11$/2Vs5n77zw3P/e5SML/Mo.eTGdQs5Gi6zLqCNTAD6PbEH6KoOTOh2",
                            RolId = 4,
                            SoyIsim = "Kıvılcım"
                        },
                        new
                        {
                            Id = 12,
                            Email = "gorevli@example.com",
                            Isim = "Melek",
                            Password = "$2a$11$oPKVHnehv9qCCjFpws/MfefF56scQLjBzrWtC16l38A0wlHy81fV.",
                            RolId = 3,
                            SoyIsim = "Altun"
                        },
                        new
                        {
                            Id = 13,
                            Email = "yazar@example.com",
                            Isim = "Ebrar",
                            Password = "$2a$11$HylT7QzlgnevenX.p0eBpe2YLzoONE6VnE7PvaGvYAJqdZ5uysBKi",
                            RolId = 2,
                            SoyIsim = "Saygılı"
                        },
                        new
                        {
                            Id = 14,
                            Email = "uye@example.com",
                            Isim = "Zehra",
                            Password = "$2a$11$1F2RV6hIBwijyO1TI3YDXe5yNOADmPK4.JoWkiwO/Of2TlJuucI9S",
                            RolId = 1,
                            SoyIsim = "Akdemir"
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.kitapOdunc", b =>
                {
                    b.HasOne("libraryApp.backend.Entity.kitap", "kitap")
                        .WithMany("kitapOduncIstekleri")
                        .HasForeignKey("KitapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("libraryApp.backend.Entity.user", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("kitap");

                    b.Navigation("user");
                });

            modelBuilder.Entity("libraryApp.backend.Entity.kitapYayinTalebi", b =>
                {
                    b.HasOne("libraryApp.backend.Entity.kitap", "kitap")
                        .WithMany("kitapYayinTalepleri")
                        .HasForeignKey("KitapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("libraryApp.backend.Entity.user", "yazar")
                        .WithMany()
                        .HasForeignKey("YazarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("kitap");

                    b.Navigation("yazar");
                });

            modelBuilder.Entity("libraryApp.backend.Entity.kitapYazari", b =>
                {
                    b.HasOne("libraryApp.backend.Entity.kitap", "kitap")
                        .WithMany("kitapYazarlari")
                        .HasForeignKey("KitapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("libraryApp.backend.Entity.user", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("kitap");

                    b.Navigation("user");
                });

            modelBuilder.Entity("libraryApp.backend.Entity.mesaj", b =>
                {
                    b.HasOne("libraryApp.backend.Entity.user", "gonderen")
                        .WithMany()
                        .HasForeignKey("GonderenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("gonderen");
                });

            modelBuilder.Entity("libraryApp.backend.Entity.sayfa", b =>
                {
                    b.HasOne("libraryApp.backend.Entity.kitap", null)
                        .WithMany("sayfalar")
                        .HasForeignKey("KitapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("libraryApp.backend.Entity.user", b =>
                {
                    b.HasOne("libraryApp.backend.Entity.rol", "rol")
                        .WithMany()
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("rol");
                });

            modelBuilder.Entity("libraryApp.backend.Entity.kitap", b =>
                {
                    b.Navigation("kitapOduncIstekleri");

                    b.Navigation("kitapYayinTalepleri");

                    b.Navigation("kitapYazarlari");

                    b.Navigation("sayfalar");
                });
#pragma warning restore 612, 618
        }
    }
}
