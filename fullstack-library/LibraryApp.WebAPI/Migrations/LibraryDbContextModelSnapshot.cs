// <auto-generated />
using System;
using LibraryApp.Data.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace fullstack_library.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    partial class LibraryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LibraryApp.Data.Entity.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsBorrowed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("DATE");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsBorrowed = false,
                            IsPublished = true,
                            PublishDate = new DateTime(2023, 7, 22, 18, 15, 44, 315, DateTimeKind.Utc).AddTicks(6336),
                            Title = "To Kill a Mockingbird"
                        },
                        new
                        {
                            Id = 2,
                            IsBorrowed = false,
                            IsPublished = true,
                            PublishDate = new DateTime(2023, 9, 10, 18, 15, 44, 315, DateTimeKind.Utc).AddTicks(6347),
                            Title = "1984"
                        },
                        new
                        {
                            Id = 3,
                            IsBorrowed = false,
                            IsPublished = true,
                            PublishDate = new DateTime(2023, 10, 30, 18, 15, 44, 315, DateTimeKind.Utc).AddTicks(6350),
                            Title = "The Great Gatsby"
                        },
                        new
                        {
                            Id = 4,
                            IsBorrowed = false,
                            IsPublished = true,
                            PublishDate = new DateTime(2023, 12, 19, 18, 15, 44, 315, DateTimeKind.Utc).AddTicks(6353),
                            Title = "The Catcher in the Rye"
                        },
                        new
                        {
                            Id = 5,
                            IsBorrowed = false,
                            IsPublished = true,
                            PublishDate = new DateTime(2024, 2, 7, 18, 15, 44, 315, DateTimeKind.Utc).AddTicks(6356),
                            Title = "Moby-Dick"
                        },
                        new
                        {
                            Id = 6,
                            IsBorrowed = false,
                            IsPublished = true,
                            PublishDate = new DateTime(2024, 3, 28, 18, 15, 44, 315, DateTimeKind.Utc).AddTicks(6404),
                            Title = "Pride and Prejudice"
                        },
                        new
                        {
                            Id = 7,
                            IsBorrowed = false,
                            IsPublished = true,
                            PublishDate = new DateTime(2024, 5, 17, 18, 15, 44, 315, DateTimeKind.Utc).AddTicks(6407),
                            Title = "The Lord of the Rings"
                        },
                        new
                        {
                            Id = 8,
                            IsBorrowed = false,
                            IsPublished = true,
                            PublishDate = new DateTime(2024, 5, 27, 18, 15, 44, 315, DateTimeKind.Utc).AddTicks(6410),
                            Title = "Jane Eyre"
                        },
                        new
                        {
                            Id = 9,
                            IsBorrowed = false,
                            IsPublished = true,
                            PublishDate = new DateTime(2024, 6, 6, 18, 15, 44, 315, DateTimeKind.Utc).AddTicks(6412),
                            Title = "Brave New World"
                        },
                        new
                        {
                            Id = 10,
                            IsBorrowed = false,
                            IsPublished = true,
                            PublishDate = new DateTime(2024, 6, 16, 18, 15, 44, 315, DateTimeKind.Utc).AddTicks(6414),
                            Title = "The Hobbit"
                        },
                        new
                        {
                            Id = 11,
                            IsBorrowed = false,
                            IsPublished = true,
                            PublishDate = new DateTime(2024, 6, 26, 18, 15, 44, 315, DateTimeKind.Utc).AddTicks(6417),
                            Title = "Wuthering Heights"
                        },
                        new
                        {
                            Id = 12,
                            IsBorrowed = false,
                            IsPublished = true,
                            PublishDate = new DateTime(2024, 7, 6, 18, 15, 44, 315, DateTimeKind.Utc).AddTicks(6419),
                            Title = "Fahrenheit 451"
                        },
                        new
                        {
                            Id = 13,
                            IsBorrowed = false,
                            IsPublished = true,
                            PublishDate = new DateTime(2024, 7, 16, 18, 15, 44, 315, DateTimeKind.Utc).AddTicks(6421),
                            Title = "The Chronicles of Narnia"
                        },
                        new
                        {
                            Id = 14,
                            IsBorrowed = false,
                            IsPublished = true,
                            PublishDate = new DateTime(2024, 7, 26, 18, 15, 44, 315, DateTimeKind.Utc).AddTicks(6424),
                            Title = "Little Women"
                        },
                        new
                        {
                            Id = 15,
                            IsBorrowed = false,
                            IsPublished = true,
                            PublishDate = new DateTime(2024, 8, 5, 18, 15, 44, 315, DateTimeKind.Utc).AddTicks(6426),
                            Title = "The Picture of Dorian Gray"
                        });
                });

            modelBuilder.Entity("LibraryApp.Data.Entity.BookAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("BookAuthors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            UserId = 8
                        },
                        new
                        {
                            Id = 3,
                            BookId = 3,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            BookId = 4,
                            UserId = 8
                        },
                        new
                        {
                            Id = 5,
                            BookId = 5,
                            UserId = 3
                        },
                        new
                        {
                            Id = 6,
                            BookId = 6,
                            UserId = 8
                        },
                        new
                        {
                            Id = 7,
                            BookId = 7,
                            UserId = 3
                        },
                        new
                        {
                            Id = 8,
                            BookId = 8,
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            BookId = 9,
                            UserId = 3
                        },
                        new
                        {
                            Id = 10,
                            BookId = 10,
                            UserId = 8
                        },
                        new
                        {
                            Id = 11,
                            BookId = 11,
                            UserId = 3
                        },
                        new
                        {
                            Id = 12,
                            BookId = 12,
                            UserId = 8
                        },
                        new
                        {
                            Id = 13,
                            BookId = 13,
                            UserId = 3
                        },
                        new
                        {
                            Id = 14,
                            BookId = 14,
                            UserId = 8
                        },
                        new
                        {
                            Id = 15,
                            BookId = 15,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("LibraryApp.Data.Entity.BookBorrowActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("DATE");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReturned")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("DATE");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("BookBorrowActivities");
                });

            modelBuilder.Entity("LibraryApp.Data.Entity.BookPublishRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsPending")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("DATE");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("BookPublishRequests");
                });

            modelBuilder.Entity("LibraryApp.Data.Entity.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsReceiverRead")
                        .HasColumnType("boolean");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Details = "Selam, nasılsın? Bir konu hakkında soru soracaktım",
                            IsReceiverRead = false,
                            ReceiverId = 2,
                            SenderId = 1,
                            Title = "Title test 1"
                        },
                        new
                        {
                            Id = 2,
                            Details = "Can we schedule a meeting for next week?",
                            IsReceiverRead = true,
                            ReceiverId = 3,
                            SenderId = 2,
                            Title = "Meeting Request"
                        },
                        new
                        {
                            Id = 3,
                            Details = "The project is moving forward as planned. Let's discuss further.",
                            IsReceiverRead = false,
                            ReceiverId = 4,
                            SenderId = 3,
                            Title = "Project Update"
                        },
                        new
                        {
                            Id = 4,
                            Details = "Don't forget to submit the report by end of day.",
                            IsReceiverRead = true,
                            ReceiverId = 5,
                            SenderId = 4,
                            Title = "Reminder"
                        },
                        new
                        {
                            Id = 5,
                            Details = "Please provide feedback on the recent presentation.",
                            IsReceiverRead = false,
                            ReceiverId = 1,
                            SenderId = 5,
                            Title = "Feedback Request"
                        },
                        new
                        {
                            Id = 6,
                            Details = "Just following up on the last message I sent.",
                            IsReceiverRead = true,
                            ReceiverId = 2,
                            SenderId = 1,
                            Title = "Follow-up"
                        },
                        new
                        {
                            Id = 7,
                            Details = "Please respond as soon as possible regarding the urgent matter.",
                            IsReceiverRead = false,
                            ReceiverId = 3,
                            SenderId = 2,
                            Title = "Urgent"
                        },
                        new
                        {
                            Id = 8,
                            Details = "Thank you for your assistance with the project.",
                            IsReceiverRead = true,
                            ReceiverId = 4,
                            SenderId = 3,
                            Title = "Thank You"
                        },
                        new
                        {
                            Id = 9,
                            Details = "I have a question about the new policy changes.",
                            IsReceiverRead = false,
                            ReceiverId = 5,
                            SenderId = 4,
                            Title = "Question"
                        },
                        new
                        {
                            Id = 10,
                            Details = "You are invited to the team-building event next week.",
                            IsReceiverRead = true,
                            ReceiverId = 1,
                            SenderId = 5,
                            Title = "Invitation"
                        },
                        new
                        {
                            Id = 11,
                            Details = "Can we have a quick chat tomorrow about the project?",
                            IsReceiverRead = false,
                            ReceiverId = 3,
                            SenderId = 1,
                            Title = "Quick Chat"
                        },
                        new
                        {
                            Id = 12,
                            Details = "I need the latest report by tomorrow.",
                            IsReceiverRead = true,
                            ReceiverId = 4,
                            SenderId = 2,
                            Title = "Report Needed"
                        },
                        new
                        {
                            Id = 13,
                            Details = "Please provide an update on the status of the task.",
                            IsReceiverRead = false,
                            ReceiverId = 5,
                            SenderId = 3,
                            Title = "Update Required"
                        },
                        new
                        {
                            Id = 14,
                            Details = "Reminder to review the attached document.",
                            IsReceiverRead = true,
                            ReceiverId = 1,
                            SenderId = 4,
                            Title = "Reminder"
                        },
                        new
                        {
                            Id = 15,
                            Details = "I have a suggestion for improving the workflow.",
                            IsReceiverRead = false,
                            ReceiverId = 2,
                            SenderId = 5,
                            Title = "Suggestion"
                        },
                        new
                        {
                            Id = 16,
                            Details = "I would like your feedback on the recent changes.",
                            IsReceiverRead = true,
                            ReceiverId = 4,
                            SenderId = 1,
                            Title = "Feedback"
                        },
                        new
                        {
                            Id = 17,
                            Details = "Following up on the previous discussion about the project.",
                            IsReceiverRead = false,
                            ReceiverId = 3,
                            SenderId = 2,
                            Title = "Follow-up"
                        },
                        new
                        {
                            Id = 18,
                            Details = "Here's a proposal for the upcoming project.",
                            IsReceiverRead = true,
                            ReceiverId = 5,
                            SenderId = 3,
                            Title = "Proposal"
                        },
                        new
                        {
                            Id = 19,
                            Details = "I have a query regarding the latest changes.",
                            IsReceiverRead = false,
                            ReceiverId = 1,
                            SenderId = 4,
                            Title = "Query"
                        },
                        new
                        {
                            Id = 20,
                            Details = "This is an urgent matter that requires your immediate attention.",
                            IsReceiverRead = true,
                            ReceiverId = 2,
                            SenderId = 5,
                            Title = "Urgent"
                        },
                        new
                        {
                            Id = 21,
                            Details = "Here is the latest update on the project.",
                            IsReceiverRead = false,
                            ReceiverId = 3,
                            SenderId = 1,
                            Title = "Update"
                        },
                        new
                        {
                            Id = 22,
                            Details = "You are invited to the upcoming workshop.",
                            IsReceiverRead = true,
                            ReceiverId = 4,
                            SenderId = 2,
                            Title = "Invitation"
                        },
                        new
                        {
                            Id = 23,
                            Details = "Following up on our meeting from last week.",
                            IsReceiverRead = false,
                            ReceiverId = 5,
                            SenderId = 3,
                            Title = "Meeting Follow-up"
                        },
                        new
                        {
                            Id = 24,
                            Details = "A new task has been assigned to you.",
                            IsReceiverRead = true,
                            ReceiverId = 1,
                            SenderId = 4,
                            Title = "Task Assigned"
                        },
                        new
                        {
                            Id = 25,
                            Details = "Please review the attached document and provide feedback.",
                            IsReceiverRead = false,
                            ReceiverId = 2,
                            SenderId = 5,
                            Title = "Review Request"
                        });
                });

            modelBuilder.Entity("LibraryApp.Data.Entity.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PageNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Pages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            Content = "In a land of fantasy, an unexpected hero emerged from the ordinary. The journey began with a single step into the unknown, leading to adventures beyond imagination.",
                            PageNumber = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 1,
                            Content = "The hero faced trials that tested their courage and wisdom. Each challenge revealed hidden strengths and forged bonds that would be crucial in the trials ahead.",
                            PageNumber = 2
                        },
                        new
                        {
                            Id = 3,
                            BookId = 1,
                            Content = "As the hero ventured deeper into uncharted territories, they uncovered secrets long buried and faced adversaries that sought to thwart their quest.",
                            PageNumber = 3
                        },
                        new
                        {
                            Id = 4,
                            BookId = 1,
                            Content = "In the end, the hero's journey culminated in a revelation that changed their world forever, proving that even the smallest steps can lead to the grandest adventures.",
                            PageNumber = 4
                        },
                        new
                        {
                            Id = 5,
                            BookId = 2,
                            Content = "In the bustling city, a lone inventor labored in secrecy, crafting designs that promised to revolutionize the world. Their work went unnoticed until a pivotal encounter changed everything.",
                            PageNumber = 1
                        },
                        new
                        {
                            Id = 6,
                            BookId = 2,
                            Content = "The inventor's designs were met with skepticism, but perseverance led to breakthroughs that captured the attention of influential figures, setting the stage for a transformative era.",
                            PageNumber = 2
                        },
                        new
                        {
                            Id = 7,
                            BookId = 2,
                            Content = "Collaborations with renowned scientists led to the development of groundbreaking technologies, shifting the dynamics of the city and bringing the inventor’s dreams to fruition.",
                            PageNumber = 3
                        },
                        new
                        {
                            Id = 8,
                            BookId = 2,
                            Content = "The city, now a beacon of innovation, celebrated the inventor's contributions. Their legacy was cemented as a pioneer in a new age of technological advancement.",
                            PageNumber = 4
                        },
                        new
                        {
                            Id = 9,
                            BookId = 3,
                            Content = "Deep within a secluded forest, a hidden realm thrived in harmony. The forest's peace was disrupted by foreboding signs, hinting at challenges that lay ahead.",
                            PageNumber = 1
                        },
                        new
                        {
                            Id = 10,
                            BookId = 3,
                            Content = "A young guardian was chosen to protect the sanctuary. Their journey began with ancient rituals and encounters that revealed the weight of their new responsibilities.",
                            PageNumber = 2
                        },
                        new
                        {
                            Id = 11,
                            BookId = 3,
                            Content = "As the guardian traveled beyond the forest, they encountered allies and enemies, each revealing more about the prophecy and the role they were destined to play.",
                            PageNumber = 3
                        },
                        new
                        {
                            Id = 12,
                            BookId = 3,
                            Content = "The culmination of their quest brought forth a revelation that not only affected the sanctuary but also bridged the gap between the hidden realm and the outside world.",
                            PageNumber = 4
                        },
                        new
                        {
                            Id = 13,
                            BookId = 4,
                            Content = "In a small village, a young girl discovered an ancient artifact that set her on a path to uncover secrets long forgotten. Her adventure was just beginning.",
                            PageNumber = 1
                        },
                        new
                        {
                            Id = 14,
                            BookId = 4,
                            Content = "The artifact led her to distant lands and mysterious allies, each piece of the puzzle revealing more about the ancient prophecy and her role in it.",
                            PageNumber = 2
                        },
                        new
                        {
                            Id = 15,
                            BookId = 4,
                            Content = "Along the way, she faced trials that tested her resolve and discovered hidden strengths within herself. Each challenge brought her closer to the ultimate truth.",
                            PageNumber = 3
                        },
                        new
                        {
                            Id = 16,
                            BookId = 4,
                            Content = "The journey concluded with a revelation that changed her world, showing that the path of destiny is often forged through courage and perseverance.",
                            PageNumber = 4
                        },
                        new
                        {
                            Id = 17,
                            BookId = 5,
                            Content = "In a futuristic society, a rogue scientist defied the norms to pursue a groundbreaking experiment. The risks were high, but the potential rewards were even greater.",
                            PageNumber = 1
                        },
                        new
                        {
                            Id = 18,
                            BookId = 5,
                            Content = "The scientist's experiment faced numerous obstacles, from technical failures to opposition from authorities. Each challenge tested their determination and ingenuity.",
                            PageNumber = 2
                        },
                        new
                        {
                            Id = 19,
                            BookId = 5,
                            Content = "Despite the setbacks, the scientist made significant progress. Their work began to attract attention and eventually changed the course of their society's future.",
                            PageNumber = 3
                        },
                        new
                        {
                            Id = 20,
                            BookId = 5,
                            Content = "The experiment's success marked a new era of innovation and possibilities, proving that courage in the face of adversity can lead to transformative change.",
                            PageNumber = 4
                        },
                        new
                        {
                            Id = 21,
                            BookId = 6,
                            Content = "On a distant planet, a team of explorers embarked on a mission to uncover the secrets of an ancient civilization. Their journey was filled with wonder and danger.",
                            PageNumber = 1
                        },
                        new
                        {
                            Id = 22,
                            BookId = 6,
                            Content = "As they delved deeper into the ruins, they encountered relics and puzzles that hinted at the civilization's advanced knowledge and mysterious disappearance.",
                            PageNumber = 2
                        },
                        new
                        {
                            Id = 23,
                            BookId = 6,
                            Content = "The explorers faced perilous challenges, including natural hazards and unexpected encounters. Each discovery brought them closer to understanding the planet's enigmatic past.",
                            PageNumber = 3
                        },
                        new
                        {
                            Id = 24,
                            BookId = 6,
                            Content = "The mission's conclusion revealed profound truths about the civilization and the planet, marking a significant achievement in the history of exploration.",
                            PageNumber = 4
                        },
                        new
                        {
                            Id = 25,
                            BookId = 7,
                            Content = "In a dystopian world, a young rebel fought against a corrupt regime. Their struggle was a beacon of hope for a society yearning for change.",
                            PageNumber = 1
                        },
                        new
                        {
                            Id = 26,
                            BookId = 7,
                            Content = "The rebel's journey was fraught with danger and sacrifice. Allies were few, and enemies were many, but their resolve remained unshaken.",
                            PageNumber = 2
                        },
                        new
                        {
                            Id = 27,
                            BookId = 7,
                            Content = "Amidst the turmoil, the rebel uncovered secrets that could alter the balance of power. Their actions inspired a movement that spread across the land.",
                            PageNumber = 3
                        },
                        new
                        {
                            Id = 28,
                            BookId = 7,
                            Content = "The rebel's legacy was one of courage and resilience. Their fight against tyranny became a symbol of hope for future generations.",
                            PageNumber = 4
                        },
                        new
                        {
                            Id = 29,
                            BookId = 8,
                            Content = "In an enchanted realm, a mystical artifact held the key to unlocking ancient powers. A group of heroes embarked on a quest to find it.",
                            PageNumber = 1
                        },
                        new
                        {
                            Id = 30,
                            BookId = 8,
                            Content = "The quest took them through magical landscapes and mythical creatures. Each step brought them closer to the artifact and the powers it held.",
                            PageNumber = 2
                        },
                        new
                        {
                            Id = 31,
                            BookId = 8,
                            Content = "Challenges and riddles tested their skills and unity. They discovered that the true power of the artifact lay in their courage and friendship.",
                            PageNumber = 3
                        },
                        new
                        {
                            Id = 32,
                            BookId = 8,
                            Content = "The artifact's discovery brought about a transformation in the realm, uniting the land and restoring balance to its magical energies.",
                            PageNumber = 4
                        },
                        new
                        {
                            Id = 33,
                            BookId = 9,
                            Content = "In the depths of the ocean, a marine biologist uncovered secrets of a lost underwater city. Their discovery was both awe-inspiring and perilous.",
                            PageNumber = 1
                        },
                        new
                        {
                            Id = 34,
                            BookId = 9,
                            Content = "The biologist's exploration revealed advanced technologies and forgotten histories. Each finding contributed to a deeper understanding of the city's rise and fall.",
                            PageNumber = 2
                        },
                        new
                        {
                            Id = 35,
                            BookId = 9,
                            Content = "Encountering dangers both natural and artificial, the biologist pressed on, driven by the quest for knowledge and the preservation of the city's legacy.",
                            PageNumber = 3
                        },
                        new
                        {
                            Id = 36,
                            BookId = 9,
                            Content = "The expedition's findings reshaped the understanding of oceanic civilizations, leading to new discoveries and a greater appreciation of the planet's mysteries.",
                            PageNumber = 4
                        },
                        new
                        {
                            Id = 37,
                            BookId = 10,
                            Content = "In a bustling metropolis, a detective sought to solve a series of enigmatic crimes. Their investigation uncovered a web of intrigue and deception.",
                            PageNumber = 1
                        },
                        new
                        {
                            Id = 38,
                            BookId = 10,
                            Content = "The detective's pursuit of clues led them through hidden corners of the city, each revelation bringing them closer to unraveling the truth behind the crimes.",
                            PageNumber = 2
                        },
                        new
                        {
                            Id = 39,
                            BookId = 10,
                            Content = "Faced with false leads and dangerous encounters, the detective remained resolute, piecing together the puzzle with skill and determination.",
                            PageNumber = 3
                        },
                        new
                        {
                            Id = 40,
                            BookId = 10,
                            Content = "The resolution of the case not only brought justice but also shed light on the darker aspects of the city, prompting a wave of change and reform.",
                            PageNumber = 4
                        },
                        new
                        {
                            Id = 41,
                            BookId = 11,
                            Content = "In a fantasy kingdom, a young prince set out on a quest to reclaim his throne. The journey was fraught with danger and tests of character.",
                            PageNumber = 1
                        },
                        new
                        {
                            Id = 42,
                            BookId = 11,
                            Content = "The prince faced trials that tested his leadership and resolve. Each challenge brought him closer to understanding the responsibilities of ruling.",
                            PageNumber = 2
                        },
                        new
                        {
                            Id = 43,
                            BookId = 11,
                            Content = "Allies and adversaries alike shaped his journey, revealing truths about the kingdom's past and the future he hoped to build.",
                            PageNumber = 3
                        },
                        new
                        {
                            Id = 44,
                            BookId = 11,
                            Content = "The prince's return marked the beginning of a new era for the kingdom, one shaped by the lessons learned and the strength gained on his quest.",
                            PageNumber = 4
                        },
                        new
                        {
                            Id = 45,
                            BookId = 12,
                            Content = "In a secretive research facility, a scientist uncovered a groundbreaking discovery that had the potential to revolutionize their field of study.",
                            PageNumber = 1
                        },
                        new
                        {
                            Id = 46,
                            BookId = 12,
                            Content = "The research led to exciting advancements but also drew the attention of powerful entities with conflicting interests.",
                            PageNumber = 2
                        },
                        new
                        {
                            Id = 47,
                            BookId = 12,
                            Content = "Navigating the complex landscape of scientific ethics and external pressures, the scientist worked tirelessly to ensure their discovery's positive impact.",
                            PageNumber = 3
                        },
                        new
                        {
                            Id = 48,
                            BookId = 12,
                            Content = "The discovery's successful implementation marked a significant milestone, demonstrating the potential for innovation to shape the future.",
                            PageNumber = 4
                        },
                        new
                        {
                            Id = 49,
                            BookId = 13,
                            Content = "In an ancient land, a scholar stumbled upon a forgotten manuscript that revealed the secrets of an ancient civilization.",
                            PageNumber = 1
                        },
                        new
                        {
                            Id = 50,
                            BookId = 13,
                            Content = "The manuscript's revelations led the scholar on a journey across the land, uncovering hidden truths and long-lost artifacts.",
                            PageNumber = 2
                        },
                        new
                        {
                            Id = 51,
                            BookId = 13,
                            Content = "Each discovery added to the scholar's understanding of the civilization's rise and fall, providing valuable insights into their culture and technology.",
                            PageNumber = 3
                        },
                        new
                        {
                            Id = 52,
                            BookId = 13,
                            Content = "The scholar's findings transformed historical knowledge and inspired further exploration into the ancient world's mysteries.",
                            PageNumber = 4
                        },
                        new
                        {
                            Id = 53,
                            BookId = 14,
                            Content = "In a bustling space station, an astronaut embarked on a mission to explore uncharted regions of space. The journey was filled with challenges and discoveries.",
                            PageNumber = 1
                        },
                        new
                        {
                            Id = 54,
                            BookId = 14,
                            Content = "The mission's crew encountered alien phenomena and navigated through hazardous environments, each obstacle revealing more about the cosmos.",
                            PageNumber = 2
                        },
                        new
                        {
                            Id = 55,
                            BookId = 14,
                            Content = "As the exploration continued, the astronaut uncovered signs of ancient extraterrestrial civilizations and their impact on the galaxy.",
                            PageNumber = 3
                        },
                        new
                        {
                            Id = 56,
                            BookId = 14,
                            Content = "The mission's success expanded humanity's understanding of space and paved the way for future exploration and interstellar travel.",
                            PageNumber = 4
                        },
                        new
                        {
                            Id = 57,
                            BookId = 15,
                            Content = "In a post-apocalyptic world, a group of survivors struggled to rebuild society amidst the ruins. Their efforts were fraught with challenges and dangers.",
                            PageNumber = 1
                        },
                        new
                        {
                            Id = 58,
                            BookId = 15,
                            Content = "The survivors faced conflicts with other factions and the harsh realities of their environment, testing their resilience and resourcefulness.",
                            PageNumber = 2
                        },
                        new
                        {
                            Id = 59,
                            BookId = 15,
                            Content = "Amidst the struggle, they forged alliances and developed strategies to secure their future, working towards a new beginning for their community.",
                            PageNumber = 3
                        },
                        new
                        {
                            Id = 60,
                            BookId = 15,
                            Content = "Their efforts culminated in a restored sense of hope and a foundation for rebuilding, marking the dawn of a new era from the ashes of the old.",
                            PageNumber = 4
                        });
                });

            modelBuilder.Entity("LibraryApp.Data.Entity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "pendingUser"
                        },
                        new
                        {
                            Id = 2,
                            Name = "member"
                        },
                        new
                        {
                            Id = 3,
                            Name = "author"
                        },
                        new
                        {
                            Id = 4,
                            Name = "staff"
                        },
                        new
                        {
                            Id = 5,
                            Name = "manager"
                        });
                });

            modelBuilder.Entity("LibraryApp.Data.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("DATE");

                    b.Property<float>("FineAmount")
                        .HasColumnType("real");

                    b.Property<char>("Gender")
                        .HasColumnType("character(1)");

                    b.Property<bool>("IsPunished")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FineAmount = 0f,
                            Gender = 'F',
                            IsPunished = false,
                            Name = "Alice",
                            Password = "123",
                            RoleId = 1,
                            Surname = "Smith",
                            Username = "alice"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1985, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FineAmount = 0f,
                            Gender = 'M',
                            IsPunished = false,
                            Name = "Bob",
                            Password = "123",
                            RoleId = 2,
                            Surname = "Johnson",
                            Username = "bobby"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1992, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FineAmount = 0f,
                            Gender = 'F',
                            IsPunished = false,
                            Name = "Carol",
                            Password = "123",
                            RoleId = 3,
                            Surname = "Williams",
                            Username = "carol"
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(1980, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FineAmount = 0f,
                            Gender = 'M',
                            IsPunished = false,
                            Name = "Dave",
                            Password = "123",
                            RoleId = 4,
                            Surname = "Brown",
                            Username = "dave1"
                        },
                        new
                        {
                            Id = 5,
                            BirthDate = new DateTime(1995, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FineAmount = 0f,
                            Gender = 'F',
                            IsPunished = false,
                            Name = "Eve",
                            Password = "123",
                            RoleId = 5,
                            Surname = "Jones",
                            Username = "eve01"
                        },
                        new
                        {
                            Id = 6,
                            BirthDate = new DateTime(1987, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FineAmount = 0f,
                            Gender = 'M',
                            IsPunished = false,
                            Name = "Frank",
                            Password = "123",
                            RoleId = 1,
                            Surname = "Miller",
                            Username = "frank"
                        },
                        new
                        {
                            Id = 7,
                            BirthDate = new DateTime(1993, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FineAmount = 0f,
                            Gender = 'F',
                            IsPunished = false,
                            Name = "Grace",
                            Password = "123",
                            RoleId = 2,
                            Surname = "Wilson",
                            Username = "grace"
                        },
                        new
                        {
                            Id = 8,
                            BirthDate = new DateTime(1988, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FineAmount = 0f,
                            Gender = 'M',
                            IsPunished = false,
                            Name = "Henry",
                            Password = "123",
                            RoleId = 3,
                            Surname = "Moore",
                            Username = "henry"
                        },
                        new
                        {
                            Id = 9,
                            BirthDate = new DateTime(1994, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FineAmount = 0f,
                            Gender = 'F',
                            IsPunished = false,
                            Name = "Ivy",
                            Password = "123",
                            RoleId = 4,
                            Surname = "Taylor",
                            Username = "ivy99"
                        },
                        new
                        {
                            Id = 10,
                            BirthDate = new DateTime(1991, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FineAmount = 0f,
                            Gender = 'M',
                            IsPunished = false,
                            Name = "Jack",
                            Password = "123",
                            RoleId = 5,
                            Surname = "Anderson",
                            Username = "jack1"
                        },
                        new
                        {
                            Id = 11,
                            BirthDate = new DateTime(1991, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FineAmount = 0f,
                            Gender = 'M',
                            IsPunished = false,
                            Name = "NameOfManager",
                            Password = "123",
                            RoleId = 5,
                            Surname = "Anderson",
                            Username = "manager"
                        },
                        new
                        {
                            Id = 12,
                            BirthDate = new DateTime(1991, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FineAmount = 0f,
                            Gender = 'M',
                            IsPunished = false,
                            Name = "NameOfStaff",
                            Password = "123",
                            RoleId = 4,
                            Surname = "Anderson",
                            Username = "staff"
                        },
                        new
                        {
                            Id = 13,
                            BirthDate = new DateTime(1991, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FineAmount = 0f,
                            Gender = 'M',
                            IsPunished = false,
                            Name = "NameOfAuthor",
                            Password = "123",
                            RoleId = 3,
                            Surname = "Anderson",
                            Username = "author"
                        },
                        new
                        {
                            Id = 14,
                            BirthDate = new DateTime(1991, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FineAmount = 0f,
                            Gender = 'M',
                            IsPunished = false,
                            Name = "NameOfMember",
                            Password = "123",
                            RoleId = 2,
                            Surname = "Anderson",
                            Username = "member"
                        },
                        new
                        {
                            Id = 15,
                            BirthDate = new DateTime(1991, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FineAmount = 0f,
                            Gender = 'M',
                            IsPunished = false,
                            Name = "NameOfPending",
                            Password = "123",
                            RoleId = 1,
                            Surname = "Anderson",
                            Username = "pending"
                        });
                });

            modelBuilder.Entity("LibraryApp.Data.Entity.BookAuthor", b =>
                {
                    b.HasOne("LibraryApp.Data.Entity.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryApp.Data.Entity.User", "User")
                        .WithMany("BookAuthors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryApp.Data.Entity.BookBorrowActivity", b =>
                {
                    b.HasOne("LibraryApp.Data.Entity.Book", "Book")
                        .WithMany("BookBorrowActivities")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryApp.Data.Entity.User", "User")
                        .WithMany("BookActivities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryApp.Data.Entity.BookPublishRequest", b =>
                {
                    b.HasOne("LibraryApp.Data.Entity.Book", "Book")
                        .WithMany("BookPublishRequests")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LibraryApp.Data.Entity.Message", b =>
                {
                    b.HasOne("LibraryApp.Data.Entity.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryApp.Data.Entity.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("LibraryApp.Data.Entity.Page", b =>
                {
                    b.HasOne("LibraryApp.Data.Entity.Book", "Book")
                        .WithMany("Pages")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LibraryApp.Data.Entity.User", b =>
                {
                    b.HasOne("LibraryApp.Data.Entity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("LibraryApp.Data.Entity.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("BookBorrowActivities");

                    b.Navigation("BookPublishRequests");

                    b.Navigation("Pages");
                });

            modelBuilder.Entity("LibraryApp.Data.Entity.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryApp.Data.Entity.User", b =>
                {
                    b.Navigation("BookActivities");

                    b.Navigation("BookAuthors");
                });
#pragma warning restore 612, 618
        }
    }
}
